const createRoutes = (routerItems, level = 0) => {
    return routerItems.map((routerItem, index) => {
        const {
            componentInstance,
            children,
            ...routeProps
        } = routerItem;

        const {
            boundaryComponent: BoundaryComponent = null,
            suspenseFallback = null,
            elementProps = {},
        } = componentInstance.metadata;

        const Component = componentInstance.getComponent();

        const createAppRouterElement = (Component) => {
            return <%= map.createElement %>(
                <%= map.Suspense %>,
                {
                    fallback: suspenseFallback,
                },
                <%= map.createElement %>(Component, elementProps),
            );
        };

        return <%= map.createElement %>(
            <%= map.Route %>,
            {
                key: `level${level}_${index}`,
                ...routeProps,
                ...(
                    Component
                        ? {
                            element: BoundaryComponent
                                ? <%= map.createElement %>(
                                    BoundaryComponent,
                                    {},
                                    createAppRouterElement(Component),
                                )
                                : createAppRouterElement(Component),
                        }
                        : {}
                ),
            },
            (Array.isArray(children) && children.length > 0) ? createRoutes(children, level + 1) : [],
        );
    });
};

const useRouteElements = (Module) => {
    const [routerItems, setRouterItems] = <%= map.useState %>([]);
    const [elements, setElements] = <%= map.useState %>(null);

    <%= map.useEffect %>(() => {
        const RootModule = Module;
        const factory = new <%= map.Factory %>();
        factory.create(RootModule).then((items) => {
            setRouterItems(items);
        });
    }, [Module]);

    <%= map.useEffect %>(() => {
        const elements = createRoutes(routerItems);
        setElements(elements);
    }, [routerItems]);

    return elements;
};

const RootContainer = ({
    module: Module,
    routerProps = {},
    RouterComponent = <%= map.BrowserRouter %>,
}: any) => {
    const elements = useRouteElements(Module);

    return <%= map.createElement %>(
        RouterComponent,
        routerProps,
        <%= map.createElement %>(<%= map.Routes %>, {}, elements),
    );
};

const bootstrap = (configList) => {
    if (!Array.isArray(configList)) {
        return;
    }

    for (const configItem of configList) {
        const {
            module: Module,
            RouterComponent,
            routerProps,
            container = document.getElementById('root'),
        } = configItem;

        <%= map.render %>(
            <%= map.createElement %>(RootContainer, {
                module: Module,
                RouterComponent,
                routerProps,
            }),
            container,
        );
    }
};
